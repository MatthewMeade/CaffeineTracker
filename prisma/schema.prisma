// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model UserFavorite {
    id          String   @id @default(cuid())
    userId      String
    name        String
    caffeineMg  Decimal  @map("caffeine_mg")
    createdAt   DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([userId, name, caffeineMg])
    @@map("user_favorites")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id         String    @id @default(cuid())
    email      String?   @unique
    isGuest    Boolean   @default(false)
    createdAt  DateTime  @default(now()) @map("created_at")
    updatedAt  DateTime  @default(now()) @updatedAt @map("updated_at")
    
    // Keep existing relations for NextAuth compatibility
    name          String?
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    favorites     UserFavorite[]
    caffeineEntries CaffeineEntry[]
    dailyLimits   UserDailyLimit[]

    @@map("users")
}

model CaffeineEntry {
    id         String   @id @default(cuid())
    userId     String   @map("user_id")
    consumedAt DateTime @map("consumed_at")
    createdAt  DateTime @default(now()) @map("created_at")

    // Snapshot fields
    name       String   // The name of the drink or a manual description
    caffeineMg Decimal  @map("caffeine_mg") // The exact amount for this entry

    user  User   @relation(fields: [userId], references: [id])

    @@index([userId, consumedAt])
    @@map("caffeine_entries")
}

model UserDailyLimit {
    id            String   @id @default(cuid())
    userId        String   @map("user_id")
    limitMg       Decimal  @map("limit_mg")
    effectiveFrom DateTime @default(now()) @map("effective_from")
    createdAt     DateTime @default(now()) @map("created_at")

    user User @relation(fields: [userId], references: [id])

    @@unique([userId, effectiveFrom])
    @@map("user_daily_limits")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
