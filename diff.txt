diff --git a/.vscode/settings.json b/.vscode/settings.json
index 88d0bd9..2c4d3d8 100644
--- a/.vscode/settings.json
+++ b/.vscode/settings.json
@@ -10,5 +10,6 @@
     "javascriptreact",
     "typescript",
     "typescriptreact"
-  ]
+  ],
+  "terminal.integrated.defaultProfile.linux": "bash"
 } 
\ No newline at end of file
diff --git a/__tests__/__snapshots__/layout.test.tsx.snap b/__tests__/__snapshots__/layout.test.tsx.snap
index deb528e..571faf4 100644
--- a/__tests__/__snapshots__/layout.test.tsx.snap
+++ b/__tests__/__snapshots__/layout.test.tsx.snap
@@ -32,6 +32,7 @@ exports[`RootLayout > renders the layout with null session 1`] = `
                   "key": null,
                   "props": {
                     "children": "Test Child",
+                    "data-testid": "layout-test-child",
                   },
                   "type": "div",
                 },
@@ -85,6 +86,7 @@ exports[`RootLayout > renders the layout with session provider and children 1`]
                   "key": null,
                   "props": {
                     "children": "Test Child",
+                    "data-testid": "layout-test-child",
                   },
                   "type": "div",
                 },
diff --git a/__tests__/app/_components/DailyView.test.tsx b/__tests__/app/_components/DailyView.test.tsx
index 171788e..206086a 100644
--- a/__tests__/app/_components/DailyView.test.tsx
+++ b/__tests__/app/_components/DailyView.test.tsx
@@ -1,29 +1,10 @@
 import "@testing-library/jest-dom";
-import { render, screen } from "@testing-library/react";
+import { render, screen, cleanup } from "@testing-library/react";
 import { DailyView } from "../../../src/app/_components/DailyView";
 import { SessionProvider } from "next-auth/react";
-import { vi, Mock } from "vitest";
+import { vi } from "vitest";
 import type { Session } from "next-auth";
-
-// Mock the tRPC module
-vi.mock("../../../src/trpc/react", () => ({
-  api: {
-    entries: {
-      getDaily: {
-        useQuery: vi.fn(),
-      },
-    },
-    settings: {
-      getLimit: {
-        useQuery: vi.fn(),
-      },
-    },
-  },
-  TRPCReactProvider: ({ children }: { children: React.ReactNode }) => <div>{children}</div>,
-}));
-
-// Mock the tRPC hooks to return proper mock functions
-const mockUseQuery = vi.fn();
+import { mockGetDaily, mockGetLimit, mockGetSuggestions, mockCreateMutation, mockUseUtils } from "../../../vitest.setup";
 
 // Mock NextAuth session
 const mockSession: Session = {
@@ -40,6 +21,10 @@ describe("DailyView", () => {
     vi.resetAllMocks();
   });
 
+  afterEach(() => {
+    cleanup();
+  });
+
   const renderWithProviders = (component: React.ReactElement) => {
     return render(
       <SessionProvider session={mockSession}>
@@ -49,23 +34,46 @@ describe("DailyView", () => {
   };
 
   it("shows loading state initially", async () => {
-    const { api } = await import("../../../src/trpc/react");
-    (api.entries.getDaily.useQuery as unknown as Mock).mockReturnValue({ isLoading: true });
-    (api.settings.getLimit.useQuery as unknown as Mock).mockReturnValue({ isLoading: true });
+    mockGetDaily.mockReturnValue({ 
+      data: undefined, 
+      isLoading: true, 
+      error: null 
+    });
+    mockGetLimit.mockReturnValue({ 
+      data: undefined, 
+      isLoading: true, 
+      error: null 
+    });
     
     renderWithProviders(<DailyView />);
     expect(screen.getByText(/Loading your daily data/i)).toBeInTheDocument();
   });
 
   it("renders with empty data for new user", async () => {
-    const { api } = await import("../../../src/trpc/react");
-    (api.entries.getDaily.useQuery as unknown as Mock).mockReturnValue({ 
+    mockGetDaily.mockReturnValue({ 
       isLoading: false, 
-      data: { daily_total_mg: 0, entries: [] } 
+      data: { daily_total_mg: 0, entries: [] },
+      error: null
     });
-    (api.settings.getLimit.useQuery as unknown as Mock).mockReturnValue({ 
+    mockGetLimit.mockReturnValue({ 
       isLoading: false, 
-      data: { current_limit_mg: null } 
+      data: { current_limit_mg: null },
+      error: null
+    });
+    mockGetSuggestions.mockReturnValue({ 
+      data: [],
+      isLoading: false,
+      error: null
+    });
+    mockCreateMutation.mockReturnValue({ 
+      mutateAsync: vi.fn(),
+      isPending: false
+    });
+    mockUseUtils.mockReturnValue({ 
+      entries: { 
+        getDaily: { invalidate: vi.fn() },
+        getSuggestions: { invalidate: vi.fn() }
+      } 
     });
     
     renderWithProviders(<DailyView />);
@@ -73,10 +81,32 @@ describe("DailyView", () => {
     expect(screen.getByText("0mg")).toBeInTheDocument();
   });
 
-  it("shows guest sign-in form for guest users", async () => {
-    const { api } = await import("../../../src/trpc/react");
-    (api.entries.getDaily.useQuery as unknown as Mock).mockReturnValue({ isLoading: false, data: undefined });
-    (api.settings.getLimit.useQuery as unknown as Mock).mockReturnValue({ isLoading: false, data: undefined });
+  it("shows same interface for guest users as authenticated users", async () => {
+    mockGetDaily.mockReturnValue({ 
+      isLoading: false, 
+      data: { daily_total_mg: 0, entries: [] },
+      error: null
+    });
+    mockGetLimit.mockReturnValue({ 
+      isLoading: false, 
+      data: { current_limit_mg: 400 },
+      error: null
+    });
+    mockGetSuggestions.mockReturnValue({ 
+      data: [],
+      isLoading: false,
+      error: null
+    });
+    mockCreateMutation.mockReturnValue({ 
+      mutateAsync: vi.fn(),
+      isPending: false
+    });
+    mockUseUtils.mockReturnValue({ 
+      entries: { 
+        getDaily: { invalidate: vi.fn() },
+        getSuggestions: { invalidate: vi.fn() }
+      } 
+    });
     
     const guestSession: Session = {
       ...mockSession,
@@ -92,6 +122,9 @@ describe("DailyView", () => {
       </SessionProvider>
     );
 
-    expect(screen.getByText(/Sign in to save your data permanently/i)).toBeInTheDocument();
+    // Guest users should see the same interface as authenticated users
+    expect(screen.getAllByText("Caffeine Flow")).toHaveLength(1);
+    expect(screen.getAllByText("Add a drink to start tracking your timeline")).toHaveLength(1);
+    expect(screen.getAllByText("0mg")).toHaveLength(1);
   });
 }); 
\ No newline at end of file
diff --git a/__tests__/app/_components/SessionProvider.test.tsx b/__tests__/app/_components/SessionProvider.test.tsx
index d288b19..39bc361 100644
--- a/__tests__/app/_components/SessionProvider.test.tsx
+++ b/__tests__/app/_components/SessionProvider.test.tsx
@@ -1,13 +1,13 @@
 import React from "react";
 import { describe, it, expect, vi } from "vitest";
-import { render } from "@testing-library/react";
+import { render, screen } from "@testing-library/react";
 import { SessionProvider } from "~/app/_components/SessionProvider";
 import type { Session } from "next-auth";
 
-// Mock next-auth/react
+// Mock next-auth/react with a more specific testid
 vi.mock("next-auth/react", () => ({
   SessionProvider: ({ children }: { children: React.ReactNode }) => (
-    <div data-testid="session-provider">{children}</div>
+    <div data-testid="nextauth-session-provider">{children}</div>
   ),
 }));
 
@@ -21,24 +21,34 @@ describe("SessionProvider", () => {
       expires: "2024-01-01T00:00:00.000Z",
     };
 
-    const { getByTestId, getByText } = render(
+    const { container } = render(
       <SessionProvider session={mockSession}>
-        <div>Test Child</div>
+        <div data-testid="test-child">Test Child</div>
       </SessionProvider>,
     );
 
-    expect(getByTestId("session-provider")).toBeDefined();
-    expect(getByText("Test Child")).toBeDefined();
+    // Use container to scope the query to this specific render
+    const sessionProvider = container.querySelector('[data-testid="nextauth-session-provider"]');
+    const testChild = container.querySelector('[data-testid="test-child"]');
+    
+    expect(sessionProvider).toBeDefined();
+    expect(testChild).toBeDefined();
+    expect(testChild?.textContent).toBe("Test Child");
   });
 
   it("handles null session", () => {
-    const { getByTestId, getByText } = render(
+    const { container } = render(
       <SessionProvider session={null}>
-        <div>Test Child</div>
+        <div data-testid="test-child">Test Child</div>
       </SessionProvider>,
     );
 
-    expect(getByTestId("session-provider")).toBeDefined();
-    expect(getByText("Test Child")).toBeDefined();
+    // Use container to scope the query to this specific render
+    const sessionProvider = container.querySelector('[data-testid="nextauth-session-provider"]');
+    const testChild = container.querySelector('[data-testid="test-child"]');
+    
+    expect(sessionProvider).toBeDefined();
+    expect(testChild).toBeDefined();
+    expect(testChild?.textContent).toBe("Test Child");
   });
 });
diff --git a/__tests__/app/_components/SignInForm.test.tsx b/__tests__/app/_components/SignInForm.test.tsx
index 50aa034..5331e9c 100644
--- a/__tests__/app/_components/SignInForm.test.tsx
+++ b/__tests__/app/_components/SignInForm.test.tsx
@@ -1,5 +1,5 @@
-import { describe, it, expect, vi, beforeEach } from "vitest";
-import { render, screen, fireEvent, waitFor } from "@testing-library/react";
+import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
+import { render, screen, fireEvent, waitFor, cleanup } from "@testing-library/react";
 import { signIn, useSession } from "next-auth/react";
 import { SignInForm } from "~/app/_components/SignInForm";
 import type { SignInResponse } from "next-auth/react";
@@ -22,13 +22,25 @@ describe("SignInForm", () => {
     } as const);
   });
 
+  afterEach(() => {
+    cleanup();
+  });
+
   it("renders the form with email input and submit button", () => {
     render(<SignInForm />);
 
     expect(screen.getByLabelText(/email address/i)).toBeDefined();
     expect(
-      screen.getByRole("button", { name: /send magic link/i }),
-    ).toBeDefined();
+      screen.getAllByRole("button", { name: /send magic link/i }),
+    ).toHaveLength(1);
+  });
+
+  it("renders the guest sign-in button", () => {
+    render(<SignInForm />);
+
+    expect(
+      screen.getAllByRole("button", { name: /continue as guest/i }),
+    ).toHaveLength(1);
   });
 
   it("handles successful sign in", async () => {
@@ -47,9 +59,11 @@ describe("SignInForm", () => {
     const emailInput = screen.getByLabelText(/email address/i);
 
     fireEvent.change(emailInput, { target: { value: "test@example.com" } });
-    fireEvent.click(screen.getByRole("button", {
+    const sendButton = screen.getAllByRole("button", {
       name: /send magic link/i,
-    }));
+    })[0]!;
+    expect(sendButton).toBeDefined();
+    fireEvent.click(sendButton);
 
     expect(screen.getByText(/sending/i)).toBeDefined();
 
@@ -74,59 +88,69 @@ describe("SignInForm", () => {
     const emailInput = screen.getByLabelText(/email address/i);
 
     fireEvent.change(emailInput, { target: { value: "test@example.com" } });
-    fireEvent.click(screen.getByRole("button", {
+    const sendButton = screen.getAllByRole("button", {
       name: /send magic link/i,
-    }));
+    })[0]!;
+    expect(sendButton).toBeDefined();
+    fireEvent.click(sendButton);
 
     await waitFor(() => {
       expect(screen.getByText(/error sending email/i)).toBeDefined();
     });
   });
 
-  it("handles unexpected errors", async () => {
+  it("handles successful guest sign in", async () => {
     const mockSignIn = vi.mocked(signIn);
-    mockSignIn.mockRejectedValueOnce(new Error("Network error"));
+    const mockResponse: SignInResponse = {
+      ok: true,
+      error: undefined,
+      status: 200,
+      url: "/",
+      code: "success",
+    };
+    mockSignIn.mockResolvedValueOnce(mockResponse);
 
     render(<SignInForm />);
 
-    const emailInput = screen.getByLabelText(/email address/i);
+    const guestButton = screen.getAllByRole("button", {
+      name: /continue as guest/i,
+    })[0]!;
+    expect(guestButton).toBeDefined();
+    fireEvent.click(guestButton);
 
-    fireEvent.change(emailInput, { target: { value: "test@example.com" } });
-    fireEvent.click(screen.getByRole("button", {
-      name: /send magic link/i,
-    }));
+    expect(screen.getByText(/signing in/i)).toBeDefined();
 
     await waitFor(() => {
-      expect(
-        screen.getByText(/an error occurred: network error/i),
-      ).toBeDefined();
+      expect(screen.getByText(/signed in as guest successfully/i)).toBeDefined();
     });
-  });
-
-  it("validates email input", async () => {
-    render(<SignInForm />);
 
-    const emailInput = screen.getByLabelText(/email address/i);
+    expect(mockSignIn).toHaveBeenCalledWith("anonymous", {
+      redirect: false,
+      callbackUrl: "/",
+    });
+  });
 
-    // Test invalid email
-    fireEvent.change(emailInput, { target: { value: "invalid-email" } });
-    fireEvent.submit(screen.getByTestId("sign-in-form"));
+  it("handles guest sign in error", async () => {
+    const mockSignIn = vi.mocked(signIn);
+    const mockResponse: SignInResponse = {
+      ok: false,
+      error: "Failed to sign in as guest",
+      status: 400,
+      url: "/",
+      code: "error",
+    };
+    mockSignIn.mockResolvedValueOnce(mockResponse);
 
-    // Wait for error message to appear
-    await waitFor(() => {
-      expect(
-        screen.getByText(/please enter a valid email address/i),
-      ).toBeDefined();
-    });
+    render(<SignInForm />);
 
-    // Test valid email
-    fireEvent.change(emailInput, { target: { value: "test@example.com" } });
-    fireEvent.submit(screen.getByTestId("sign-in-form"));
+    const guestButton = screen.getAllByRole("button", {
+      name: /continue as guest/i,
+    })[0]!;
+    expect(guestButton).toBeDefined();
+    fireEvent.click(guestButton);
 
     await waitFor(() => {
-      expect(
-        screen.queryByText(/please enter a valid email address/i),
-      ).toBeNull();
+      expect(screen.getByText(/error signing in as guest/i)).toBeDefined();
     });
   });
 });
diff --git a/__tests__/components/LoginButton.test.tsx b/__tests__/components/LoginButton.test.tsx
index dc06e14..456b494 100644
--- a/__tests__/components/LoginButton.test.tsx
+++ b/__tests__/components/LoginButton.test.tsx
@@ -1,6 +1,6 @@
 import React from "react";
-import { describe, it, expect, vi, beforeEach } from "vitest";
-import { render, screen, fireEvent } from "@testing-library/react";
+import { describe, it, expect, vi, beforeEach, afterEach } from "vitest";
+import { render, screen, fireEvent, cleanup } from "@testing-library/react";
 import { useSession, signIn, signOut } from "next-auth/react";
 import { LoginButton } from "~/components/LoginButton";
 
@@ -16,6 +16,10 @@ describe("LoginButton", () => {
     vi.clearAllMocks();
   });
 
+  afterEach(() => {
+    cleanup();
+  });
+
   it("should show loading state when session is loading", () => {
     const mockUseSession = vi.mocked(useSession);
     mockUseSession.mockReturnValue({
@@ -25,7 +29,7 @@ describe("LoginButton", () => {
     });
 
     render(<LoginButton />);
-    expect(screen.getByText("Loading...")).toBeDefined();
+    expect(screen.getAllByText("Loading...")).toHaveLength(1);
   });
 
   it("should show sign in button when user is not authenticated", () => {
@@ -37,7 +41,7 @@ describe("LoginButton", () => {
     });
 
     render(<LoginButton />);
-    expect(screen.getByText("Sign In")).toBeDefined();
+    expect(screen.getAllByText("Sign In")).toHaveLength(1);
   });
 
   it("should show user email and sign out button when authenticated", () => {
@@ -57,8 +61,8 @@ describe("LoginButton", () => {
     });
 
     render(<LoginButton />);
-    expect(screen.getByText("test@example.com")).toBeDefined();
-    expect(screen.getByText("Sign Out")).toBeDefined();
+    expect(screen.getAllByText("test@example.com")).toHaveLength(1);
+    expect(screen.getAllByText("Sign Out")).toHaveLength(1);
   });
 
   it("should call signIn when sign in button is clicked", () => {
@@ -70,7 +74,7 @@ describe("LoginButton", () => {
     });
 
     render(<LoginButton />);
-    const signInButton = screen.getByText("Sign In");
+    const signInButton = screen.getAllByText("Sign In")[0]!;
     fireEvent.click(signInButton);
 
     expect(signIn).toHaveBeenCalledWith("email");
@@ -93,7 +97,7 @@ describe("LoginButton", () => {
     });
 
     render(<LoginButton />);
-    const signOutButton = screen.getByText("Sign Out");
+    const signOutButton = screen.getAllByText("Sign Out")[0]!;
     fireEvent.click(signOutButton);
 
     expect(signOut).toHaveBeenCalled();
diff --git a/__tests__/layout.test.tsx b/__tests__/layout.test.tsx
index be51dcc..f7dfc09 100644
--- a/__tests__/layout.test.tsx
+++ b/__tests__/layout.test.tsx
@@ -39,18 +39,28 @@ describe("RootLayout", () => {
     };
     mockAuth.mockResolvedValueOnce(mockSession);
 
-    const element = await RootLayout({ children: <div>Test Child</div> });
-    const { getByText } = render(element);
-    expect(getByText("Test Child")).toBeDefined();
+    const element = await RootLayout({ children: <div data-testid="layout-test-child">Test Child</div> });
+    const { container } = render(element);
+    
+    // Use container to scope the query to this specific render
+    const testChild = container.querySelector('[data-testid="layout-test-child"]');
+    expect(testChild).toBeDefined();
+    expect(testChild?.textContent).toBe("Test Child");
+    
     // Snapshot test for the returned JSX structure
     expect(element).toMatchSnapshot();
   });
 
   it("renders the layout with null session", async () => {
     mockAuth.mockResolvedValueOnce(null);
-    const element = await RootLayout({ children: <div>Test Child</div> });
-    const { getByText } = render(element);
-    expect(getByText("Test Child")).toBeDefined();
+    const element = await RootLayout({ children: <div data-testid="layout-test-child">Test Child</div> });
+    const { container } = render(element);
+    
+    // Use container to scope the query to this specific render
+    const testChild = container.querySelector('[data-testid="layout-test-child"]');
+    expect(testChild).toBeDefined();
+    expect(testChild?.textContent).toBe("Test Child");
+    
     expect(element).toMatchSnapshot();
   });
 
diff --git a/__tests__/page.test.tsx b/__tests__/page.test.tsx
index e08f876..88f59e3 100644
--- a/__tests__/page.test.tsx
+++ b/__tests__/page.test.tsx
@@ -1,5 +1,6 @@
 import { describe, it, expect, vi } from "vitest";
 import { render, screen } from "@testing-library/react";
+import type { ReactNode } from "react";
 import HomePage from "~/app/page";
 
 // Mock the auth function
@@ -16,11 +17,17 @@ vi.mock("~/app/_components/GuestDataLinker", () => ({
 }));
 
 vi.mock("~/app/_components/AuthenticationWrapper", () => ({
-  AuthenticationWrapper: ({ initialDailyData, initialLimitData }: any) => (
+  AuthenticationWrapper: ({ 
+    initialDailyData, 
+    initialLimitData 
+  }: { 
+    initialDailyData?: ReactNode; 
+    initialLimitData?: ReactNode; 
+  }) => (
     <div data-testid="authentication-wrapper">
       Authentication Wrapper
-      {initialDailyData && <div data-testid="initial-daily-data">Daily Data</div>}
-      {initialLimitData && <div data-testid="initial-limit-data">Limit Data</div>}
+      {initialDailyData !== undefined && <div data-testid="initial-daily-data">Daily Data</div>}
+      {initialLimitData !== undefined && <div data-testid="initial-limit-data">Limit Data</div>}
     </div>
   ),
 }));
@@ -51,10 +58,14 @@ describe("HomePage", () => {
     });
 
     const element = await HomePage();
-    render(element);
-
-    expect(screen.getByTestId("guest-data-linker")).toBeInTheDocument();
-    expect(screen.getByTestId("authentication-wrapper")).toBeInTheDocument();
+    const { container } = render(element);
+
+    // Use container to scope the query to this specific render
+    const guestDataLinker = container.querySelector('[data-testid="guest-data-linker"]');
+    const authWrapper = container.querySelector('[data-testid="authentication-wrapper"]');
+    
+    expect(guestDataLinker).toBeInTheDocument();
+    expect(authWrapper).toBeInTheDocument();
   });
 
   it("renders authenticated view with initial data when session exists", async () => {
@@ -77,12 +88,18 @@ describe("HomePage", () => {
     });
 
     const element = await HomePage();
-    render(element);
-
-    expect(screen.getByTestId("guest-data-linker")).toBeInTheDocument();
-    expect(screen.getByTestId("authentication-wrapper")).toBeInTheDocument();
-    expect(screen.getByTestId("initial-daily-data")).toBeInTheDocument();
-    expect(screen.getByTestId("initial-limit-data")).toBeInTheDocument();
+    const { container } = render(element);
+
+    // Use container to scope the query to this specific render
+    const guestDataLinker = container.querySelector('[data-testid="guest-data-linker"]');
+    const authWrapper = container.querySelector('[data-testid="authentication-wrapper"]');
+    const dailyData = container.querySelector('[data-testid="initial-daily-data"]');
+    const limitData = container.querySelector('[data-testid="initial-limit-data"]');
+    
+    expect(guestDataLinker).toBeInTheDocument();
+    expect(authWrapper).toBeInTheDocument();
+    expect(dailyData).toBeInTheDocument();
+    expect(limitData).toBeInTheDocument();
   });
 
   it("handles data fetching errors gracefully", async () => {
@@ -105,12 +122,18 @@ describe("HomePage", () => {
     });
 
     const element = await HomePage();
-    render(element);
-
-    expect(screen.getByTestId("guest-data-linker")).toBeInTheDocument();
-    expect(screen.getByTestId("authentication-wrapper")).toBeInTheDocument();
+    const { container } = render(element);
+
+    // Use container to scope the query to this specific render
+    const guestDataLinker = container.querySelector('[data-testid="guest-data-linker"]');
+    const authWrapper = container.querySelector('[data-testid="authentication-wrapper"]');
+    const dailyData = container.querySelector('[data-testid="initial-daily-data"]');
+    const limitData = container.querySelector('[data-testid="initial-limit-data"]');
+    
+    expect(guestDataLinker).toBeInTheDocument();
+    expect(authWrapper).toBeInTheDocument();
     // Should not have initial data when there's an error
-    expect(screen.queryByTestId("initial-daily-data")).not.toBeInTheDocument();
-    expect(screen.queryByTestId("initial-limit-data")).not.toBeInTheDocument();
+    expect(dailyData).not.toBeInTheDocument();
+    expect(limitData).not.toBeInTheDocument();
   });
 });
diff --git a/__tests__/server/auth/utils.test.ts b/__tests__/server/auth/utils.test.ts
index d6b1d2d..1a6d1f3 100644
--- a/__tests__/server/auth/utils.test.ts
+++ b/__tests__/server/auth/utils.test.ts
@@ -151,18 +151,18 @@ describe("Auth Utils", () => {
         },
       });
 
-      // Try to link to a non-existent user (should fail)
+      // Try to link to a non-existent user (should fail due to foreign key constraint)
       await expect(
         linkAnonymousUser(anonymousUser.id, "non-existent-id"),
-      ).rejects.toThrow(TRPCError);
+      ).rejects.toThrow("New user does not exist");
 
-      // Verify anonymous user still exists
+      // Verify anonymous user still exists (transaction should be rolled back)
       const userStillExists = await db.user.findUnique({
         where: { id: anonymousUser.id },
       });
       expect(userStillExists).not.toBeNull();
 
-      // Verify favorite still belongs to anonymous user
+      // Verify favorite still belongs to anonymous user (transaction should be rolled back)
       const favoriteStillExists = await db.userFavorite.findUnique({
         where: { id: favorite.id },
       });
diff --git a/__tests__/server/trpc/routers/favorites.test.ts b/__tests__/server/trpc/routers/favorites.test.ts
index 477f541..ffc0bff 100644
--- a/__tests__/server/trpc/routers/favorites.test.ts
+++ b/__tests__/server/trpc/routers/favorites.test.ts
@@ -67,7 +67,7 @@ describe("favorites router", () => {
     type Input = inferProcedureInput<AppRouter["favorites"]["add"]>;
     const input: Input = { name: "Duplicate Coffee", caffeineMg: 100 };
 
-    await expect(caller.add(input)).rejects.toThrow();
+    await expect(caller.add(input)).rejects.toThrow("Failed to create favorite");
   });
 
   test("add procedure allows same name with different caffeine content", async () => {
diff --git a/src/app/_components/AuthenticationWrapper.tsx b/src/app/_components/AuthenticationWrapper.tsx
index c93810e..da31fd1 100644
--- a/src/app/_components/AuthenticationWrapper.tsx
+++ b/src/app/_components/AuthenticationWrapper.tsx
@@ -1,8 +1,8 @@
 "use client";
 
-import { useSession } from "next-auth/react";
+import { useSession, signIn } from "next-auth/react";
+import { useEffect, useState } from "react";
 import { DailyView } from "./DailyView";
-import { SignInForm } from "./SignInForm";
 import type { DailyEntriesApiResponse } from "~/types/api";
 import type { DailyLimitApiResponse } from "~/types/api";
 
@@ -16,6 +16,21 @@ export function AuthenticationWrapper({
   initialLimitData 
 }: AuthenticationWrapperProps) {
   const { data: session, status } = useSession();
+  const [isSignInAttempted, setIsSignInAttempted] = useState(false);
+
+  useEffect(() => {
+    // Only attempt automatic sign-in if:
+    // 1. Status is "unauthenticated" (no session)
+    // 2. We haven't already attempted to sign in
+    if (status === "unauthenticated" && !isSignInAttempted) {
+      setIsSignInAttempted(true);
+      
+      signIn("anonymous", { redirect: false })
+        .catch((error) => {
+          console.error("Automatic anonymous sign-in failed:", error);
+        });
+    }
+  }, [status, isSignInAttempted]);
 
   if (status === "loading") {
     return (
@@ -25,8 +40,13 @@ export function AuthenticationWrapper({
     );
   }
 
+  // Show loading while attempting automatic sign-in or if unauthenticated
   if (!session) {
-    return <SignInForm />;
+    return (
+      <div className="min-h-screen bg-[#1A1A1A] flex items-center justify-center">
+        <div className="text-cyan-400 text-lg">Setting up your session...</div>
+      </div>
+    );
   }
 
   return (
diff --git a/src/app/_components/DailyTimeline.tsx b/src/app/_components/DailyTimeline.tsx
index 12edb16..118234f 100644
--- a/src/app/_components/DailyTimeline.tsx
+++ b/src/app/_components/DailyTimeline.tsx
@@ -1,6 +1,6 @@
 "use client";
 
-import React, { useState } from "react";
+import React, { useState, useEffect } from "react";
 import { type EntryApiResponse } from "~/types/api";
 import { motion, AnimatePresence } from "framer-motion";
 import { Card } from "~/components/ui/card";
@@ -20,6 +20,31 @@ interface GroupedEntries {
   evening: EntryApiResponse[];
 }
 
+// Move getCurrentTime outside so it is in scope for CurrentTime
+const getCurrentTime = () => {
+  return new Date().toLocaleTimeString([], {
+    hour: "numeric",
+    minute: "2-digit",
+    hour12: true,
+  });
+};
+
+// Client-only time formatting component
+function FormattedTime({ dateString }: { dateString: string }) {
+  const [formattedTime, setFormattedTime] = useState("");
+  
+  useEffect(() => {
+    const date = new Date(dateString);
+    setFormattedTime(date.toLocaleTimeString([], {
+      hour: "numeric",
+      minute: "2-digit",
+      hour12: true,
+    }));
+  }, [dateString]);
+  
+  return <>{formattedTime}</>;
+}
+
 export function DailyTimeline({ entries }: DailyTimelineProps) {
   const [isTimelineExpanded, setIsTimelineExpanded] = useState(false);
 
@@ -47,15 +72,6 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
     return grouped;
   };
 
-  const formatTime = (dateString: string): string => {
-    const date = new Date(dateString);
-    return date.toLocaleTimeString([], {
-      hour: "numeric",
-      minute: "2-digit",
-      hour12: true,
-    });
-  };
-
   const getDrinkIcon = (name: string): string => {
     const lowerName = name.toLowerCase();
     if (lowerName.includes("coffee") || lowerName.includes("espresso")) return "☕";
@@ -66,14 +82,6 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
     return "☕"; // Default
   };
 
-  const getCurrentTime = () => {
-    return new Date().toLocaleTimeString([], {
-      hour: "numeric",
-      minute: "2-digit",
-      hour12: true,
-    });
-  };
-
   const getMostRecentEntry = () => {
     if (entries.length === 0) return null;
     return entries.reduce((latest, entry) => 
@@ -125,7 +133,7 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
                 <div className="w-3 h-3 rounded-full bg-cyan-400 shadow-lg shadow-cyan-400/50 animate-pulse" />
                 <div className="flex items-center gap-2">
                   <span className="text-lg font-medium text-cyan-400">Now</span>
-                  <span className="text-sm text-gray-400">{getCurrentTime()}</span>
+                  <CurrentTime />
                 </div>
               </div>
 
@@ -135,7 +143,7 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
                   <div className="text-2xl">{getDrinkIcon(getMostRecentEntry()!.name)}</div>
                   <div className="flex-1 min-w-0">
                     <div className="font-medium text-white truncate">
-                      {getMostRecentEntry()!.name} • {formatTime(getMostRecentEntry()!.consumed_at)}
+                      {getMostRecentEntry()!.name} • <FormattedTime dateString={getMostRecentEntry()!.consumed_at} />
                     </div>
                     <div className="text-sm text-gray-400">Last entry</div>
                   </div>
@@ -189,7 +197,7 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
                                   <div className="text-2xl">{getDrinkIcon(entry.name)}</div>
                                   <div className="flex-1 min-w-0">
                                     <div className="font-medium text-white truncate">
-                                      {entry.name} • {formatTime(entry.consumed_at)}
+                                      {entry.name} • <FormattedTime dateString={entry.consumed_at} />
                                     </div>
                                   </div>
                                   <div className="flex items-center gap-2">
@@ -216,4 +224,16 @@ export function DailyTimeline({ entries }: DailyTimelineProps) {
       </div>
     </Card>
   );
+}
+
+function CurrentTime() {
+  const [time, setTime] = useState("");
+  useEffect(() => {
+    setTime(getCurrentTime());
+    const interval = setInterval(() => {
+      setTime(getCurrentTime());
+    }, 1000);
+    return () => clearInterval(interval);
+  }, []);
+  return <span className="text-sm text-gray-400">{time}</span>;
 } 
\ No newline at end of file
diff --git a/src/app/_components/DailyView.tsx b/src/app/_components/DailyView.tsx
index af42745..767ff13 100644
--- a/src/app/_components/DailyView.tsx
+++ b/src/app/_components/DailyView.tsx
@@ -5,7 +5,8 @@ import { useSession } from "next-auth/react";
 import { api } from "~/trpc/react";
 import { CaffeineGauge } from "./CaffeineGauge";
 import { DailyTimeline } from "./DailyTimeline";
-import { SignInForm } from "./SignInForm";
+import { AddEntryForm } from "./AddEntryForm";
+
 import { motion } from "framer-motion";
 import { type DailyEntriesApiResponse, type DailyLimitApiResponse } from "~/types/api";
 
@@ -46,48 +47,7 @@ export function DailyView({ initialDailyData, initialLimitData }: DailyViewProps
   const isLoading = (dailyLoading ?? false) || (limitLoading ?? false);
   const hasError = (dailyError ?? false) || (limitError ?? false);
 
-  if (isGuest) {
-    return (
-      <div className="min-h-screen bg-[#1A1A1A] text-white relative overflow-hidden">
-        {/* Background Pattern */}
-        <div className="absolute inset-0 opacity-5">
-          <div
-            className="w-full h-full"
-            style={{
-              backgroundImage: `radial-gradient(circle at 25px 25px, rgba(0, 245, 255, 0.3) 2px, transparent 0)`,
-              backgroundSize: "50px 50px",
-            }}
-          />
-        </div>
-
-        <div className="relative z-10 max-w-6xl mx-auto p-6">
-          <motion.div
-            initial={{ opacity: 0, y: -20 }}
-            animate={{ opacity: 1, y: 0 }}
-            className="text-center space-y-2 mb-8"
-          >
-            <h1 className="text-3xl font-bold bg-gradient-to-r from-cyan-400 to-purple-400 bg-clip-text text-transparent">
-              Caffeine Flow
-            </h1>
-            <p className="text-gray-400 text-sm">Track your daily energy</p>
-          </motion.div>
 
-          <div className="mx-auto mt-16 w-full max-w-lg rounded-lg bg-white/10 p-8 text-center backdrop-blur-sm border border-white/20">
-            <h2 className="mb-4 text-2xl font-bold text-white">Welcome to Caffeine Flow</h2>
-            <p className="mb-6 text-gray-300">
-              Track your daily caffeine intake with beautiful visualizations
-            </p>
-            <p className="mb-4 text-gray-400">
-              Sign in to save your data permanently.
-            </p>
-            <div className="mx-auto w-full max-w-xs">
-              <SignInForm />
-            </div>
-          </div>
-        </div>
-      </div>
-    );
-  }
 
   if (hasError) {
     return (
@@ -212,11 +172,14 @@ export function DailyView({ initialDailyData, initialLimitData }: DailyViewProps
             />
           </motion.div>
 
+          {/* Add Entry Form */}
+          <AddEntryForm />
+
           {/* Daily Timeline */}
           <motion.div
             initial={{ opacity: 0, y: 20 }}
             animate={{ opacity: 1, y: 0 }}
-            transition={{ delay: 0.4 }}
+            transition={{ delay: 0.6 }}
             className="max-w-4xl mx-auto"
           >
             <DailyTimeline entries={entries} />
diff --git a/src/app/_components/SignInForm.tsx b/src/app/_components/SignInForm.tsx
index 164b010..26c6f33 100644
--- a/src/app/_components/SignInForm.tsx
+++ b/src/app/_components/SignInForm.tsx
@@ -8,6 +8,7 @@ export function SignInForm() {
   const { data: session } = useSession();
   const [email, setEmail] = useState("");
   const [isLoading, setIsLoading] = useState(false);
+  const [isGuestLoading, setIsGuestLoading] = useState(false);
   const [message, setMessage] = useState("");
   const [isEmailInvalid, setIsEmailInvalid] = useState(false);
 
@@ -66,43 +67,85 @@ export function SignInForm() {
     }
   };
 
+  const handleGuestSignIn = async () => {
+    setIsGuestLoading(true);
+    setMessage("");
+
+    try {
+      const result = await signIn("anonymous", {
+        redirect: false,
+        callbackUrl: "/",
+      });
+
+      if (result?.error) {
+        setMessage(`Error signing in as guest: ${result.error}`);
+      } else {
+        setMessage("Signed in as guest successfully!");
+      }
+    } catch (error) {
+      console.error("Guest sign in error:", error);
+      setMessage("Failed to sign in as guest. Please try again.");
+    } finally {
+      setIsGuestLoading(false);
+    }
+  };
+
   return (
-    <form
-      onSubmit={handleSignIn}
-      className="space-y-4"
-      data-testid="sign-in-form"
-    >
-      <div>
-        <label htmlFor="email" className="block text-sm font-medium text-white">
-          Email address
-        </label>
-        <input
-          id="email"
-          type="email"
-          value={email}
-          onChange={(e) => {
-            setEmail(e.target.value);
-            if (validateEmail(e.target.value)) {
-              setIsEmailInvalid(false);
-            }
-          }}
-          required
-          className="mt-1 block w-full rounded-md border-gray-300 bg-gray-800 px-3 py-2 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none"
-          placeholder="you@example.com"
-        />
-        {isEmailInvalid && (
-          <p className="mt-2 text-sm text-red-500">
-            Please enter a valid email address
-          </p>
-        )}
+    <div className="space-y-4">
+      <form
+        onSubmit={handleSignIn}
+        className="space-y-4"
+        data-testid="sign-in-form"
+      >
+        <div>
+          <label htmlFor="email" className="block text-sm font-medium text-white">
+            Email address
+          </label>
+          <input
+            id="email"
+            type="email"
+            value={email}
+            onChange={(e) => {
+              setEmail(e.target.value);
+              if (validateEmail(e.target.value)) {
+                setIsEmailInvalid(false);
+              }
+            }}
+            required
+            className="mt-1 block w-full rounded-md border-gray-300 bg-gray-800 px-3 py-2 text-white shadow-sm focus:border-indigo-500 focus:ring-indigo-500 focus:outline-none"
+            placeholder="you@example.com"
+          />
+          {isEmailInvalid && (
+            <p className="mt-2 text-sm text-red-500">
+              Please enter a valid email address
+            </p>
+          )}
+        </div>
+
+        <button
+          type="submit"
+          disabled={isLoading}
+          className="w-full rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50"
+        >
+          {isLoading ? "Sending..." : "Send Magic Link"}
+        </button>
+      </form>
+
+      <div className="relative">
+        <div className="absolute inset-0 flex items-center">
+          <div className="w-full border-t border-gray-600" />
+        </div>
+        <div className="relative flex justify-center text-sm">
+          <span className="bg-[#1A1A1A] px-2 text-gray-400">Or</span>
+        </div>
       </div>
 
       <button
-        type="submit"
-        disabled={isLoading}
-        className="w-full rounded-md bg-indigo-600 px-4 py-2 text-sm font-medium text-white hover:bg-indigo-700 focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50"
+        onClick={handleGuestSignIn}
+        disabled={isGuestLoading}
+        className="w-full rounded-md bg-gray-700 px-4 py-2 text-sm font-medium text-white hover:bg-gray-600 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 focus:outline-none disabled:opacity-50"
       >
-        {isLoading ? "Sending..." : "Send Magic Link"}
+        {isGuestLoading ? "Signing in..." : "Continue as Guest"}
       </button>
 
       {message && (
@@ -112,6 +155,6 @@ export function SignInForm() {
           {message}
         </p>
       )}
-    </form>
+    </div>
   );
 }
diff --git a/vitest.config.ts b/vitest.config.ts
index c40c81c..ed2d57d 100644
--- a/vitest.config.ts
+++ b/vitest.config.ts
@@ -37,5 +37,11 @@ export default defineConfig({
         "src/auth.ts",
       ],
     },
+    pool: 'forks',
+    poolOptions: {
+      forks: {
+        singleFork: true
+      }
+    }
   },
 });
diff --git a/vitest.setup.ts b/vitest.setup.ts
index a10f9af..196cd5f 100644
--- a/vitest.setup.ts
+++ b/vitest.setup.ts
@@ -87,7 +87,102 @@ vi.mock("~/env.js", () => ({
   },
 }));
 
+// Global tRPC mock setup
+const mockGetDaily = vi.fn(() => ({
+  data: undefined as unknown,
+  isLoading: false,
+  error: null,
+}));
+
+const mockGetLimit = vi.fn(() => ({
+  data: undefined as unknown,
+  isLoading: false,
+  error: null,
+}));
+
+const mockGetSuggestions = vi.fn(() => ({
+  data: [],
+  isLoading: false,
+  error: null,
+}));
+
+const mockCreateMutation = vi.fn(() => ({
+  mutateAsync: vi.fn(),
+  isPending: false,
+}));
+
+const mockUseUtils = vi.fn(() => ({
+  entries: {
+    getDaily: { invalidate: vi.fn() },
+    getSuggestions: { invalidate: vi.fn() },
+  },
+}));
+
+// Global tRPC mock
+vi.mock("~/trpc/react", () => ({
+  api: {
+    entries: {
+      getDaily: {
+        useQuery: mockGetDaily,
+      },
+      getSuggestions: {
+        useQuery: mockGetSuggestions,
+      },
+      create: {
+        useMutation: mockCreateMutation,
+      },
+    },
+    settings: {
+      getLimit: {
+        useQuery: mockGetLimit,
+      },
+    },
+    useUtils: mockUseUtils,
+  },
+  TRPCReactProvider: ({ children }: { children: React.ReactNode }) => children,
+}));
+
+// Export mock functions for use in tests
+export {
+  mockGetDaily,
+  mockGetLimit,
+  mockGetSuggestions,
+  mockCreateMutation,
+  mockUseUtils,
+};
+
 // Reset all mocks before each test
 beforeEach(() => {
   vi.clearAllMocks();
+
+  // Reset tRPC mocks to default state
+  mockGetDaily.mockImplementation(() => ({
+    data: undefined,
+    isLoading: false,
+    error: null,
+  }));
+
+  mockGetLimit.mockImplementation(() => ({
+    data: undefined,
+    isLoading: false,
+    error: null,
+  }));
+
+  mockGetSuggestions.mockImplementation(() => ({
+    data: [],
+    isLoading: false,
+    error: null,
+  }));
+
+  mockCreateMutation.mockImplementation(() => ({
+    mutateAsync: vi.fn(),
+    isPending: false,
+  }));
+
+  mockUseUtils.mockImplementation(() => ({
+    entries: {
+      getDaily: { invalidate: vi.fn() },
+      getSuggestions: { invalidate: vi.fn() },
+    },
+  }));
 });
